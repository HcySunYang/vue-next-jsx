// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v-model Component:  default modelValue (with modifiers) 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"modelValue\\": ref.val,
  \\"onUpdate:modelValue\\": $event => ref.val = $event,
  \\"modelModifiers\\": {
    \\"a\\": true,
    \\"b\\": true
  }
});"
`;

exports[`v-model Component:  default modelValue 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"modelValue\\": ref.val,
  \\"onUpdate:modelValue\\": $event => ref.val = $event
});"
`;

exports[`v-model Component:  specify model prop name (with modifiers) 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"foo\\": ref.val,
  \\"onUpdate:foo\\": $event => ref.val = $event,
  \\"fooModifiers\\": {
    \\"a\\": true,
    \\"b\\": true
  }
});"
`;

exports[`v-model Component:  specify model prop name (with other props) 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"foo\\": ref.val,
  \\"onUpdate:foo\\": $event => ref.val = $event,
  \\"fooModifiers\\": {
    \\"a\\": true,
    \\"b\\": true
  },
  \\"a\\": \\"b\\"
});"
`;

exports[`v-model Component:  specify model prop name (with v-on) 1`] = `
"import { toHandlers, mergeProps, createVNode } from \\"vue\\";
createVNode(Comp, mergeProps({
  \\"foo\\": ref.val,
  \\"onUpdate:foo\\": $event => ref.val = $event,
  \\"fooModifiers\\": {
    \\"a\\": true,
    \\"b\\": true
  }
}, toHandlers(obj)));"
`;

exports[`v-model Component:  specify model prop name 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"foo\\": ref.val,
  \\"onUpdate:foo\\": $event => ref.val = $event
});"
`;

exports[`v-model Element:  input with dynamic Key binding + modifiers 1`] = `
"import { vModelDynamic, mergeProps, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", mergeProps({
  \\"onUpdate:modelValue\\": $event => ref.val = $event
}, { ...props
})), [[vModelDynamic, ref.val, void 0, {
  \\"number\\": true
}]]);"
`;

exports[`v-model Element:  input with dynamic Key binding 1`] = `
"import { vModelDynamic, mergeProps, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", mergeProps({
  \\"onUpdate:modelValue\\": $event => ref.val = $event
}, { ...props
})), [[vModelDynamic, ref.val]]);"
`;

exports[`v-model Element:  input with dynamic type attribute 1`] = `
"import { vModelDynamic, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event,
  \\"type\\": refType.value
}), [[vModelDynamic, ref.val]]);"
`;

exports[`v-model Element:  input with type=checkbox 1`] = `
"import { vModelCheckbox, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event,
  \\"type\\": \\"checkbox\\"
}), [[vModelCheckbox, ref.val]]);"
`;

exports[`v-model Element:  input with type=radio 1`] = `
"import { vModelRadio, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event,
  \\"type\\": \\"radio\\"
}), [[vModelRadio, ref.val]]);"
`;

exports[`v-model Element:  input with v-model 1`] = `
"import { vModelText, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event
}), [[vModelText, ref.val]]);"
`;

exports[`v-model Element:  textarea with v-model 1`] = `
"import { vModelText, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"textarea\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event
}), [[vModelText, ref.val]]);"
`;

exports[`vModel Component:  default modelValue (with array modifiers) 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"modelValue\\": ref.val,
  \\"onUpdate:modelValue\\": $event => ref.val = $event,
  \\"modelModifiers\\": {
    'a': true,
    'b': true
  }
});"
`;

exports[`vModel Component:  default modelValue (with object modifiers) 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"modelValue\\": ref.val,
  \\"onUpdate:modelValue\\": $event => ref.val = $event,
  \\"modelModifiers\\": {
    a: true,
    b: true
  }
});"
`;

exports[`vModel Component:  default modelValue 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"moduleValue\\": ref.val,
  \\"onUpdate:moduleValue\\": $event => ref.val = $event
});"
`;

exports[`vModel Component:  dynamic prop name 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  [dynamic]: ref.val,
  [\\"onUpdate:\\" + dynamic]: $event => ref.val = $event,
  [dynamic + \\"Modifiers\\"]: {
    a: true
  }
});"
`;

exports[`vModel Component:  specify model prop name (with modifiers) 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"foo\\": ref.val,
  \\"onUpdate:foo\\": $event => ref.val = $event,
  \\"fooModifiers\\": {
    'a': true,
    'b': true
  }
});"
`;

exports[`vModel Component:  specify model prop name 1`] = `
"import { createVNode } from \\"vue\\";
createVNode(Comp, {
  \\"foo\\": ref.val,
  \\"onUpdate:foo\\": $event => ref.val = $event
});"
`;

exports[`vModel Element:  input with dynamic Key binding + array modifiers 1`] = `
"import { vModelDynamic, mergeProps, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", mergeProps({
  \\"onUpdate:modelValue\\": $event => ref.val = $event
}, { ...props
})), [[vModelDynamic, ref.val, void 0, {
  'number': true,
  'trim': true
}]]);"
`;

exports[`vModel Element:  input with dynamic Key binding + object modifiers 1`] = `
"import { vModelDynamic, mergeProps, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", mergeProps({
  \\"onUpdate:modelValue\\": $event => ref.val = $event
}, { ...props
})), [[vModelDynamic, ref.val, void 0, {
  number: true
}]]);"
`;

exports[`vModel Element:  input with dynamic Key binding 1`] = `
"import { vModelDynamic, mergeProps, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", mergeProps({
  \\"onUpdate:modelValue\\": $event => ref.val = $event
}, { ...props
})), [[vModelDynamic, ref.val]]);"
`;

exports[`vModel Element:  input with dynamic type attribute 1`] = `
"import { vModelDynamic, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event,
  \\"type\\": refType.value
}), [[vModelDynamic, ref.val]]);"
`;

exports[`vModel Element:  input with type=checkbox 1`] = `
"import { vModelCheckbox, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event,
  \\"type\\": \\"checkbox\\"
}), [[vModelCheckbox, ref.val]]);"
`;

exports[`vModel Element:  input with type=radio 1`] = `
"import { vModelRadio, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event,
  \\"type\\": \\"radio\\"
}), [[vModelRadio, ref.val]]);"
`;

exports[`vModel Element:  input with vModel 1`] = `
"import { vModelText, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"input\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event
}), [[vModelText, ref.val]]);"
`;

exports[`vModel Element:  textarea with vModel 1`] = `
"import { vModelText, createVNode, withDirectives } from \\"vue\\";
withDirectives(createVNode(\\"textarea\\", {
  \\"onUpdate:modelValue\\": $event => ref.val = $event
}), [[vModelText, ref.val]]);"
`;
